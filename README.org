#+title:Orgmunge

* Motivation and scope
Orgmunge was born out of the desire to modify Org documents
programmatically from within Python. The wonderful [[https://github.com/karlicoss/orgparse][orgparse]] can read
an Org document into a tree object but doesn't offer an interface to
modify the tree and write it back to file.

The original use case was trying to sync Outlook calendar items with
Org: whenever someone rescheduled a meeting, my Python script was
unable to reschedule the Org heading it had originally
created. Instead of forking =orgparse=, I decided to write an actual
grammar for an Org document and use [[https://github.com/dabeaz/ply][PLY]] to generate a parser for it.

Now Org syntax is too sophisticated for me to claim that this first
attempt can parse everything. In fact, some folks way smarter than I
am (and with more formal training), have hinted that Org
syntax can't be properly parsed with a context-free grammar. For such
reasons (and for my own lack of experience with writing grammars), I
have restricted the scope of this module to the features I care about:
for each heading, the headline components (the =COMMENT= keyword, the
todo state, priority, cookies, and tags) are all parsed, as well as
any scheduling timestamps and all the drawers. The heading contents
are treated as a blob of text and the only thing the parser extracts
from the contents are the timestamps. No attempts are made at parsing
things like tables or source code blocks further. =orgmunge= can also
parse out the document's metadata and export options but the major
assumption it makes is that the document starts out with some optional
metadata and export options, followed by some optional initial body
text (not falling under any heading), and then a tree of headings. Any
export options or metadata that come later within the document are
treated as text (some heading's content).

* License
#+INCLUDE: ./LICENSE
* Tests
** Can I import the library?
#+begin_src ipython :tangle ./tests/test_import.py 
def test_import():
    try:
        import orgmunge
        assert True
    except ImportError:
        assert False
#+end_src

** Can I make an empty Org object?
#+begin_src ipython :tangle ./tests/test_make_empty.py
from orgmunge import Org

def test_make_empty_org():
    test = Org("\n", from_file=False)
    assert test
#+end_src

** Can I create an  Org object from a sting?
#+begin_src ipython :tangle ./tests/test_make_string.py
from orgmunge import Org

def test_make_org():
    test = Org('* TODO Something important\n', from_file=False)
    assert test
#+end_src


** Can I read in a test file?
#+begin_src ipython :tangle ./tests/test_save_org.py
from orgmunge import Org

def test_can_read_org():
    test = Org("./README.org")
    assert test
#+end_src

** Can I save a file out?
#+begin_src ipython :tangle ./tests/test_save_org.py
from orgmunge import Org

CONTENT = "* You can write orgfiles!!\n"

def test_save_org(tmp_path):
    p = tmp_path / "testtmp.org"
    assert len(list(tmp_path.iterdir())) == 0 # Nothing exists here
    test = Org(CONTENT, from_file=False)
    test.write(p)
    assert len(list(tmp_path.iterdir())) == 1 # testtmp. org exists
    assert p.read_text().strip(" \n") == CONTENT.strip(" \n") # Since org is plaintext these should be identical?
#+end_src
